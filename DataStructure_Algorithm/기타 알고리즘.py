# 소수 (Prime Number)
# 소수랑 1보다 큰 자연수 중에서 1과 자기자신을 제외한 자연수로는 나누어 떨어지지 않는 자연수
# 코테에서는 어떠한 자연수가 소수인지 아닌지 판별하는 문제가 자주 출제된다

# 소수 판별 함수(2 이상의 자연수에 다해여)
def is_prime_number(x):
    # 2부터(x-1) 까지의 모든 수를 확인하며
    for i in range(2, x):
        # x가 해당 수로 나누어 떨어진다면
        if x % i == 0:
            # 소수가 아님
            return False
    return True # 안 나눠지면 소수
# O(x)의 시간복잡도를 가진다


# 모든 약수가 가운데 약수를 기준으로 곱셉 연산에 대해 대칭을 이룬다
# 예) 16의 약수는 1, 2, 4, 8, 16
# 이때 2*8=16 은 8*2=16과 대칭이다
# 따라서 특정한 자연수의 모든 약수를 찾을 때 가운데 약수(제곱근) 까지만 확인하면 된다
# 예를들어 16이 2로 나누어떨어지는 것은 8로도 나누어떨어진다는 것을 의미한다

import math

def is_prime_number(x):
    # 2부터 x의 제곱근까지 모든 수를 확인하며
    for i in range(2, int(math.sqrt(x))+1):
        # x가 해당 수로 나누어 떨어진다면
        if x % i == 0:
            # 소수가 아님
            return False
    return True  # 안 나눠지면 소수

# 시간 복잡도는 O(N의 1/2제곱)
# 제곱근 만큼 줄어든다



#
# 다수의 소수 판별
#
# 특정한 수 범위 안에 존재하는 모든 소수를 찾을 때는
# 에라토스테네스의 체 알고리즘
#
# 다수의 자연수에 대하여 소수 여부를 판별할 때 사용하는 대표적이 알고리즘
# 에라토스테네스의 체는 N보다 작거나 같은 모든 소수를 찾을 때 사용한다
#
# 1. 2부터 N까지의 모든 자연수를 나열한다
# 2. 남은 수 중에서 아직 처리하지 않은 가장 작은 수 i를 찾는다
# 3. 남은 수 중에서 i의 배수를 모두 제거한다(i는 제거하지 않는다)
# 4. 더 이상 반복할 수 없을 때까지 2번과 3번의 과정을 반복한다


import math


n = 1000 # 2부터 1000까지의 소수 판별
# 처음은 모든 수가 소수(True)인 것으로 초기화
array = [True for i in range(n+1)]

# 2부터 n의 제곱근까지의 모든 수를 확인
for i in range(2, int(math.sqrt(n)) + 1):
    if array[i] == True: # 만약 i가 소수인 경우
        # i를 제외한 i의 모든 배수 지우기
        j = 2
        while i * j <= n:
            array[i * j] = False
            j += 1

#모든 소수 출력
for i in range(2, n+1):
    if array[i]:
        print(i, end=' ')

# 시간 복잡도는는 사실상 선형 시간에 가까울 정도로 매우 빠르다
# 시간 복잡도는 O(NloglogN)이다
# 에라토스테네스 체 알고리즘은 다수의 소수를 찾아야 하는 문제에서 효과적으로 사용될 수 있다
# 하지만 각 자연수에 대한 소수 여부를 저장해야 하므로 메모리가 많이 필요하다
# 예시) 자연수 10억이 소수인지 아닌지 판별




# 투 포인터
# 투 포인터 알고리즘은 리스트에 순차적으로 접근해야 할 때 두개의 점 위치를 기록하면서 처리하는 알고리즘
# 리스트에 담긴 데이터를 순차적으로 접근해야 할 때는 시작점과 끝점 2개의 점으로 접근할 데이터의 범위를 표현할 수 있다

# 1,2,3,2,5 에서 합이 5인 수열 찾기
# 1. 시작점(start)과 끝점(end)이 첫 번째 원소의 인덱스(0)를 가리키도록 한다
# 2. 현재 부분 합이 M과 같다면 카운트
# 3. 현재 부분 합이 M보다 작다면, end를 1 증가시킨다
# 4. 현재 부분 합이 M보다 크거나 같다면, start를 1 증가시킨다
# 5. 모든 경우를 확인할 때까지 2번부터 4번까지의 과정을 반복한다

n = 5 # 데이터의 개수 n
m = 5 # 찾고자 하는 부분합
data = [1,2,3,2,5]

count = 0
interval_sum = 0
end = 0

# start를 차례대로 증가시키며 반복
for start in range(n):
    # end를 가능한 만큼 이동시키기
    while interval_sum < m and end < n:
        interval_sum += data[end]
        end += 1
    # 부분합이 m일 때 카운트 증가
    if interval_sum == m:
        count += 1
    interval_sum -= data[start]

print(count)




# 구간 합(Interval Sum)

# 구간 합 문제: 연속적으로 나열된 N개의 수가 있을 때 특정 구간의 모든 수를 합한 값을 계산하는 문제
# 예를들어 5개의 데이터로 구성된 수열 {10,20,30,40,50}이 있다고 가정
# 두 번째 수부터 네 번째 수까지의 합은 20+30+40=90

# 구간 합 문제
# N개의 정수로 구성된 수열이 있다
# M개의 쿼리(Query) 정보가 주어진다
#     각 쿼리는 Left와 Right로 구성된다
#     각 쿼리에 대하여 [Left,Right]구간에 포함된 데이터들의 합을 출력해야 한다
# 수행 시간 제한은 O(N + M)



# 그러나 기본적으로 N*M의 시간 복잡도
# O(N+M)의 제한에 안 걸리려면
# 해결 방법
# 접두사 합(Prefix Sum): 배열의 맨 앞부터 특정 위치까지의 합을 미리 구해 놓은 것
#     10, 20, 30, 40, 50 이 있다면
# 0, 10, 30, 60, 100, 150 이렇게 미리 계산 해 두는것
#
# N개의 수 위치에 각각에 대하여 접두사 합을 계산하여 P에 저장한다
# 매 M개의 쿼리 정보를 확일할 때 구간 합은 P[Right] - P[Left-1]이다
# 1 부터 3까지 -> [3]-[0]
# 2 부터 5까지 -> [5]-[1]


# 데이터의 개수 N과 데이터 입력받기
n = 5
data = [10, 20, 30, 40, 50]

# 접두사 합 배열 계산
sum_value = 0
prefix_sum = [0]
for i in data:
    sum_value += i
    prefix_sum.append(sum_value)

# 구간 합 게산(세 번째 수부터 네 번째 수까지)    
left = 3
right = 4
print(prefix_sum[right] - prefix_sum[left-1])